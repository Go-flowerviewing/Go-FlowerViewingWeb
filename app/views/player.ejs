<!DOCTYPE html>
<html>
<head>
  <script src="http://code.jquery.com/jquery-latest.min.js"></script>
  <link type="text/css" rel="stylesheet" media="screen" href="/css/jquery-sakura.min.css" />
  <link type="text/css" rel="stylesheet" media="screen" href="/css/player.css" />
</head>
  <body>
    <div id="container">
      <div id="title"></div>
      <div id="player"></div>
    </div>

    <!-- clock -->
    <div id = "clock">
      <div id="clockDisplay" class="clockStyle"></div>
      <!-- <span id="format"></span> -->
    </div>
    
     <!-- clock -->

    <script src="/js/jquery-sakura.min.js"></script>
    <script>
      // cherry blossom
      $(function() {
          $('body').sakura();
      });

      $(window).load(function() {
          $('body').sakura();
      });
      //cherry blossom end

      // clock
      function renderTime() {
        var currentTime = new Date();
        var diem = "AM";
        var h = currentTime.getHours();
        var m = currentTime.getMinutes();
        var s = currentTime.getSeconds();
        setTimeout('renderTime()',1000);
          if (h == 0) {
          h = 12;
        } else if (h > 12) { 
          h = h - 12;
          diem="PM";
        }
        if (h < 10) {
          h = "0" + h;
        }
        if (m < 10) {
          m = "0" + m;
        }
        if (s < 10) {
          s = "0" + s;
        }
        var myClock = document.getElementById('clockDisplay');
        myClock.textContent =  h + ":" + m + ":" + s + " ";
        myClock.innerText = h + ":" + m + ":" + s + " ";

        // var ampm = document.getElementById('format');
        // ampm.textContent = diem + " ";
        // ampm.innerText = diem + " ";
      }
      renderTime();
      // clock end


      //youtube api
      var list = [];
      var idList = [];

      function get(callback) {
        var xhr = new XMLHttpRequest();
        xhr.open("GET", "http://127.0.0.1:3333/getPlayList/" + <%= version %>, true);
        xhr.setRequestHeader("Content-type", "application/x-www-form-urlencoded;charset=UTF-8");
        xhr.addEventListener("load", function(e){
          xmlDoc = xhr.responseXML; 
          var Music= xmlDoc.getElementsByTagName("Music"); 
          var title= xmlDoc.getElementsByTagName("title"); 
          var id = xmlDoc.getElementsByTagName("id"); 

          
          for (i=0; i<title.length; i++) {
            var testObject = {
              "title":title[i].childNodes[0].nodeValue,
              "id" : id[i].childNodes[0].nodeValue
            }
            list.push(testObject);
          }
          
          for (i=0; i<list.length; i++) {
            idList.push(list[i].id)
          }
        });

        xhr.send(null);
      }

      document.addEventListener("DOMContentLoaded", function() {
        get();
      });

      // 2. This code loads the IFrame Player API code asynchronously.
      var tag = document.createElement('script');

      tag.src = "https://www.youtube.com/iframe_api";
      var firstScriptTag = document.getElementsByTagName('script')[0];
      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

      // 3. This function creates an <iframe> (and YouTube player) after the API code downloads.
      var player;
      function onYouTubeIframeAPIReady() { // 플레이어 API 코드가 다운로드되는 즉시 실행된다. 
        player = new YT.Player('player', {
          height: '100',
          width: '250',
          // videoId: 'M7lc1UVf-VE',
          events: {
            'onReady': onPlayerReady // onReady 이벤트 실행 시 onPlayerReady 함수가 실행
          }
        });
      }

      // 4. The API will call this function when the video player is ready.
      function onPlayerReady(event) {
        event.target.loadPlaylist(idList);
        event.target.setShuffle(true);
        event.target.setLoop(true);
      }
      //youtube api end
    </script>
  </body>
</html>


<!-- 지정한 재생목록을 대기열에 넣습니다. 재생목록이 신호를 받고 재생할 준비가 되면 플레이어가 video cued 이벤트 (5)를 전달합니다.
 -playlist 매개변수는 YouTube 동영상 ID의 배열을 지정
 -선택사항인 index 매개변수는 재생할 재생목록에 있는 첫 번째 동영상의 색인을 지정합니다. 매개변수는 0부터 시작하는 색인을 사용하며 기본 매개변수 값이 0이므로 기본 동작은 재생목록에 있는 첫 번째 동영상을 로드하고 재생하는 것입니다.
player.cuePlaylist(playlist:String|Array,
index:Number,
startSeconds:Number,
suggestedQuality:String):Void


이 함수는 지정한 재생목록을 로드하고 재생합니다.
-필수인 playlist 매개변수는 YouTube 동영상 ID의 배열을 지정
player.loadPlaylist(playlist:String|Array,
index:Number,
startSeconds:Number,
suggestedQuality:String):Void

같지만 좀 다른 함수 
player.loadPlaylist({list:String,
 listType:String,
 index:Number,
 startSeconds:Number,
 suggestedQuality:String}):Void



player.nextVideo():Void
이 함수는 재생목록에서 다음 동영상을 로드하고 재생합니다.
재생목록이 연속 재생(loop)으로 설정되어 있고 재생목록의 마지막 동영상을 시청하는 동안 player.nextVideo()를 호출하면 플레이어가 목록의 첫 번째 동영상을 로드하고 재생합니다.
재생목록이 연속 재생으로 설정되어 있지 않고 재생목록의 마지막 동영상을 시청하는 동안 player.nextVideo()를 호출하면 재생이 종료됩니다.


player.setLoop(loopPlaylists:Boolean):Void
이 함수는 재생목록의 마지막 동영상이 종료된 후 동영상 플레이어가 재생목록을 연속 재생할지 아니면 재생을 중지해야 할지를 나타냅니다. 기본 동작은 재생목록을 연속 재생하지 않는 것입니다.
이 설정은 다른 재생목록을 로드하거나 신호를 주는 경우에도 유지됩니다. 즉, 재생목록을 로드하고 true 값으로 setLoop 함수를 호출한 다음 두 번째 재생목록을 로드하면 두 번째 재생 목록도 연속 재생됩니다.
필수인 loopPlaylists 매개변수는 연속 재생 동작을 식별합니다.
매개변수 값이 true이면 동영상 플레이어가 재생목록을 연속해서 재생합니다. 재생목록의 마지막 동영상을 재생한 후 동영상 플레이어가 재생목록의 시작 부분으로 돌아가서 다시 재생합니다.
매개변수 값이 false이면 동영상 플레이어가 재생목록의 마지막 동영상을 재생한 후 재생이 종료됩니다.

player.setShuffle(shufflePlaylist:Boolean):Void
이 함수는 재생목록 제작자가 지정한 순서와 다른 순서로 재생되도록 재생목록의 동영상에 셔플을 사용해야 하는지 여부를 나타냅니다. 이미 재생이 시작된 후에 재생목록에 셔플을 사용하면 재생 중인 동영상이 계속 재생되는 동안 목록의 순서가 변경됩니다. 그러면 재생될 다음 동영상은 순서가 변경된 목록에 따라 선택됩니다.
이 설정은 다른 재생목록을 로드하거나 신호를 주면 유지되지 않습니다. 즉, 재생목록을 로드하고 setShuffle 함수를 호출한 다음 두 번째 재생목록을 로드하면 두 번째 재생목록에서 셔플을 사용하지 않습니다.
필수인 shufflePlaylist 매개변수는 YouTube에서 재생목록에 셔플을 사용해야 하는지 여부를 나타냅니다.
매개변수 값이 true이면 YouTube에서 재생목록 순서에 셔플을 사용합니다. 이미 셔플을 사용하는 재생목록에 셔플을 사용하도록 함수에 지시하면 YouTube에서 다시 순서에 셔플을 사용합니다.
매개변수 값이 false이면 YouTube에서 재생목록 순서를 원래 순서로 다시 변경합니다.

 -->